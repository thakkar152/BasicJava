Seciton 13 : 

Array and array list.
-----------------------

int[] marks = {75,85,90};

jshell> int[] marks = {75,85,95};

marks ==> int[3] { 75, 85, 95 }

We dont have to change formula even if subject gets added or deleted. We can simply loop it to get total of all subjects. 

ehnacemed 'for' loop  : This was introduced in java 5

	for(int m:marks){
		sum=sum+m;
    }
	
Piece of code will work irrespective of number of subjects. 	


Above is easy way of declaring array. Typical style of declaring array is :

jshell> int[] marks = new int[5];

marks ==> int[5] { 0, 0, 0, 0, 0 }

then to store value :

marks[0] = 5;
marks[1] = 10;
....


jshell> marks.length;
$10 ==> 5

here .lenght is a property. Until now such format was used to call the static method or to call method with the object. But for array its a property. 



Excercise : 

jshell> int[] marks = {20,30,40,50,60,70,80,90};
marks ==> int[8] { 20, 30, 40, 50, 60, 70, 80, 90 }

jshell> for(int i=0;i < marks.length;i++){
   ...> System.out.println("Marks is :" + marks[i]);
   ...> }
Marks is :20
Marks is :30
Marks is :40
Marks is :50
Marks is :60
Marks is :70
Marks is :80
Marks is :90
  


Intitialization of int array will be by default 0, for double it will be 0.0 and for boolean it will be false. for string null. 

jshell> int[] marks = new int[5];

marks ==> int[5] { 0, 0, 0, 0, 0 }

default intialization of array of object is null :

jshell> class Persons{
   ...> }
|  created class Persons

jshell> Persons[] manaso = new Persons[5];

manaso ==> Persons[5] { null, null, null, null, null }


I can do 

Persons[] manso = {new Person(5),new Person(7)}  -- Calling person constuctor to intitialize objects in an array of object. 

=============

jshell> int[]  marks = {1,2,3,4,5}
marks ==> int[5] { 1, 2, 3, 4, 5 }

jshell> System.out.println(marks);
[I@57fffcd7   --- This is memory location.


To print array we can use static method toString of class Arrays : 

jshell> System.out.print(Arrays.toString(marks));
[1, 2, 3, 4, 5]

-------------

This is useful when you want your all element to be initialized by something else than 0.

jshell> int[] marks = new int[5];
marks ==> int[5] { 0, 0, 0, 0, 0 }

jshell> Arrays.fill(marks,100);

jshell> marks;
marks ==> int[5] { 100, 100, 100, 100, 100 }

-----------------

Comparision of two arrays :

jshell> marks;
marks ==> int[5] { 100, 100, 100, 100, 100 }

jshell> int[] marks1 = { 100,100,100,100,100}
marks1 ==> int[5] { 100, 100, 100, 100, 100 }

jshell> Arrays.equals(marks,marks1)
$24 ==> true

it returns true only if lenght and each elements matches. 

----------------

Array sorting :

jshell> int[]  marks = {100,20,40}
marks ==> int[3] { 100, 20, 40 }

jshell> Arrays.sort(marks);

jshell> marks
marks ==> int[3] { 20, 40, 100 }


-----------------

Refer ArrayExserciseStudentSection13_154 in eclipse. 

As bigdecimal is about accuracy, if answer is something like 98.3333333333333 unlimited digits post decimal then it will give an error that number cannot be represented accurately. 

So we have to give an argument about how many precision we want and how we want last digit to be round off. 

BigDecimal average = new BigDecimal(sum).divide(new BigDecimal(len), 2, RoundingMode.UP);  -- Check exsercise of average. 

-------------------

If I want to use marks directly without declaring, I can use eclipse functionality of replacing variable by inline values. 

int[] marks = { 96, 64, 79 };
Student s = new Student("Vidhyarthi", marks); // new int[] { 96, 64, 79 }

Select marks, Right click on variable marks -> refactor -> inline. It will replace all marks variable with actual value. 

=================================

What is Variable aruguments : //was introduced in java5 !!
------------------------------

sum (int i, int j){
	return i+j;
}

sum (4,5)
=>9

sum(4,5,6)

error because arugment does not match. To make this work we have to declare overloaded method :

sum (int i, int j, int k ){
	return i+j+k;
}

This is where variable arugment come into picture. We can make method to accept any number of argument of same data type. 

Sum(int... values){  // here values will automatically be converted to array variable. So treat it as an array
	
	
jshell> int sum(int... values){
   ...> int sum = 0;
   ...> for(int v:values){
   ...> sum = sum + v;
   ...> }
   ...> return sum;
   ...> }
|  created method sum(int...)

jshell> sum (1,2,3);
$2 ==> 6

jshell> sum (1,10);
$3 ==> 11	


For student example :

//Below both constructor are same and its not overloaded. I can pass array as well and single number as well. 
//check runner method. Method with variable arugument accepts both - array and variable arugments. 
	
	/*Student(String name, int[] marks) {
		this.name = name;
		this.marks = marks;
	}*/

	Student(String name, int... marks) {
		this.name = name;
		this.marks = marks;
	}


        int[] marks = { 96, 64, 79 };
		Student s = new Student("Vidhyarthi", marks); // new int[] { 96, 64, 79 }
		Student s1 = new Student("Chokro", 96, 99, 88);
		
		
Variable arugment should be the last arugment in the method. 

=================

its not easy to add an element or remove an element from an array. Once we declare an array, only option to add an element is to recreate an array. Once size is assigned to an array, we cannot modify it. 

jshell> int[] marks = {78,88,98}
marks ==> int[3] { 78, 88, 98 }


To overcome above thing, Java provides ArrayList. 
---------------------------------------------------

jshell> ArrayList arrayList = new ArrayList();
arrayList ==> []

jshell> arrayList.add("Apple");  //ignore warning as of now. 
arrayList.add("Orange");
arrayList.add("Banana");

jshell> arrayList;
arrayList ==> [Apple, Orange, Banana]

Similarly we can remove an element as well :
--------------------------------------------

jshell> arrayList;
arrayList ==> [Apple, Orange, Banana]

jshell> arrayList.remove("Orange");
$7 ==> true

jshell> arrayList;
arrayList ==> [Apple, Banana]

We can also use an index to remove an element. 

Right now I can add any data type in an arraylist as I have not specified any type for this arraylist. But this is not a good practice. 


jshell> arrayList.add(1);
$9 ==> true

jshell> arrayList;
arrayList ==> [Apple, Banana, 1]

So Java also provides a way to declare arraylist of certian type. Once declaring arraylist with datatype, it will stop displaying warning about raw datatype. 

jshell> ArrayList<String> arrayListString = new ArrayList<String>();   // This was introduced in Java5 and its called Generics !
arrayListString ==> []

ArrayList is a collection class. 
======================================

Convert array to arraylist in same student excersice so that we can add and remove marks. Almost all method got changed because of ArrayList. (example, size(), Collections.sort, return statement, minumum, maximum) 

ArrayListExersiceStudentSection13_164 - eclipse. 

=============================================

I was not able to use int while declaring ArrayList. It is just accepting wrapper class Integer.  

=========================

To print full object student, we can impliment method called toString in same class 

Student s = new Student();

So you can add toString method in Student class. This will automatically give java a way to print full student object according to what is mentioned in toString method.  Actually this is overriding of default method toString. 

Check ArrayListExersiceStudentSection13_164 - eclipse

For toString method, I have specified String return type. But if there are many class member of the object then we should use StringBuffer. 
		
		